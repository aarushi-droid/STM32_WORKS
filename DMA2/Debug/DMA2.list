
DMA2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000488  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00002008  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00002008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000488  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800048c  0800048c  0000148c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08000490  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  08000498  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000498  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000018f  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011b  00000000  00000000  000021c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  000022e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fa0  00000000  00000000  00002387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005e0  00000000  00000000  00003327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d27  00000000  00000000  00003907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000762e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  00007674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000031  00000000  00000000  00007734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000470 	.word	0x08000470

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	08000470 	.word	0x08000470

08000204 <DMA2_init>:
void reverse(char* str, uint32_t len);

char source[8] = "HELOYES";
char dest[8];

void DMA2_init(){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    *AHBIENR |= (1 << 22); // Enable DMA2 clock
 8000208:	4b3b      	ldr	r3, [pc, #236]	@ (80002f8 <DMA2_init+0xf4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a3a      	ldr	r2, [pc, #232]	@ (80002f8 <DMA2_init+0xf4>)
 800020e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000212:	6013      	str	r3, [r2, #0]

    // Stream 0 configuration
    *DMA2_S0CR &= ~(1 << 0); // Disable DMA stream
 8000214:	4b39      	ldr	r3, [pc, #228]	@ (80002fc <DMA2_init+0xf8>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a38      	ldr	r2, [pc, #224]	@ (80002fc <DMA2_init+0xf8>)
 800021a:	f023 0301 	bic.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]
    *DMA2_S0CR &= ~(3 << 6); // Clear DIR bits
 8000220:	4b36      	ldr	r3, [pc, #216]	@ (80002fc <DMA2_init+0xf8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a35      	ldr	r2, [pc, #212]	@ (80002fc <DMA2_init+0xf8>)
 8000226:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800022a:	6013      	str	r3, [r2, #0]
    *DMA2_S0CR |= (1 << 6);  // Memory-to-memory mode
 800022c:	4b33      	ldr	r3, [pc, #204]	@ (80002fc <DMA2_init+0xf8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a32      	ldr	r2, [pc, #200]	@ (80002fc <DMA2_init+0xf8>)
 8000232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000236:	6013      	str	r3, [r2, #0]
    *DMA2_S0CR &= ~(1 << 25); // Peripheral increment mode disabled
 8000238:	4b30      	ldr	r3, [pc, #192]	@ (80002fc <DMA2_init+0xf8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a2f      	ldr	r2, [pc, #188]	@ (80002fc <DMA2_init+0xf8>)
 800023e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000242:	6013      	str	r3, [r2, #0]
    *DMA2_S0CR &= ~(1 << 16); // Circular mode disabled
 8000244:	4b2d      	ldr	r3, [pc, #180]	@ (80002fc <DMA2_init+0xf8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a2c      	ldr	r2, [pc, #176]	@ (80002fc <DMA2_init+0xf8>)
 800024a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800024e:	6013      	str	r3, [r2, #0]
    *DMA2_S0CR |= (1 << 10);  // Memory increment mode enabled
 8000250:	4b2a      	ldr	r3, [pc, #168]	@ (80002fc <DMA2_init+0xf8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a29      	ldr	r2, [pc, #164]	@ (80002fc <DMA2_init+0xf8>)
 8000256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800025a:	6013      	str	r3, [r2, #0]
    *DMA2_S0CR &= ~(1 << 13); // Peripheral size (8-bit)
 800025c:	4b27      	ldr	r3, [pc, #156]	@ (80002fc <DMA2_init+0xf8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a26      	ldr	r2, [pc, #152]	@ (80002fc <DMA2_init+0xf8>)
 8000262:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000266:	6013      	str	r3, [r2, #0]
    *DMA2_S0CR &= ~(3 << 11); // Memory size (8-bit)
 8000268:	4b24      	ldr	r3, [pc, #144]	@ (80002fc <DMA2_init+0xf8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a23      	ldr	r2, [pc, #140]	@ (80002fc <DMA2_init+0xf8>)
 800026e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000272:	6013      	str	r3, [r2, #0]
    *DMA2_S0CR |= (1 << 9);   // Enable transfer complete interrupt
 8000274:	4b21      	ldr	r3, [pc, #132]	@ (80002fc <DMA2_init+0xf8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a20      	ldr	r2, [pc, #128]	@ (80002fc <DMA2_init+0xf8>)
 800027a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800027e:	6013      	str	r3, [r2, #0]

    // Stream 1 configuration
    *DMA2_S1CR &= ~(1 << 0); // Disable DMA stream
 8000280:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <DMA2_init+0xfc>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a1e      	ldr	r2, [pc, #120]	@ (8000300 <DMA2_init+0xfc>)
 8000286:	f023 0301 	bic.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
    *DMA2_S1CR &= ~(3 << 6); // Clear DIR bits
 800028c:	4b1c      	ldr	r3, [pc, #112]	@ (8000300 <DMA2_init+0xfc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a1b      	ldr	r2, [pc, #108]	@ (8000300 <DMA2_init+0xfc>)
 8000292:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000296:	6013      	str	r3, [r2, #0]
    *DMA2_S1CR |= (1 << 6);  // Memory-to-memory mode
 8000298:	4b19      	ldr	r3, [pc, #100]	@ (8000300 <DMA2_init+0xfc>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a18      	ldr	r2, [pc, #96]	@ (8000300 <DMA2_init+0xfc>)
 800029e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002a2:	6013      	str	r3, [r2, #0]
    *DMA2_S1CR &= ~(1 << 25); // Peripheral increment mode disabled
 80002a4:	4b16      	ldr	r3, [pc, #88]	@ (8000300 <DMA2_init+0xfc>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a15      	ldr	r2, [pc, #84]	@ (8000300 <DMA2_init+0xfc>)
 80002aa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80002ae:	6013      	str	r3, [r2, #0]
    *DMA2_S1CR &= ~(1 << 16); // Circular mode disabled
 80002b0:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <DMA2_init+0xfc>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	@ (8000300 <DMA2_init+0xfc>)
 80002b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80002ba:	6013      	str	r3, [r2, #0]
    *DMA2_S1CR |= (1 << 10);  // Memory increment mode enabled
 80002bc:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <DMA2_init+0xfc>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000300 <DMA2_init+0xfc>)
 80002c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002c6:	6013      	str	r3, [r2, #0]
    *DMA2_S1CR &= ~(1 << 13); // Peripheral size (8-bit)
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <DMA2_init+0xfc>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000300 <DMA2_init+0xfc>)
 80002ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002d2:	6013      	str	r3, [r2, #0]
    *DMA2_S1CR &= ~(3 << 11); // Memory size (8-bit)
 80002d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <DMA2_init+0xfc>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a09      	ldr	r2, [pc, #36]	@ (8000300 <DMA2_init+0xfc>)
 80002da:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80002de:	6013      	str	r3, [r2, #0]
    *DMA2_S1CR |= (1 << 9);   // Enable transfer complete interrupt
 80002e0:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <DMA2_init+0xfc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a06      	ldr	r2, [pc, #24]	@ (8000300 <DMA2_init+0xfc>)
 80002e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ea:	6013      	str	r3, [r2, #0]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40023830 	.word	0x40023830
 80002fc:	40026410 	.word	0x40026410
 8000300:	40026428 	.word	0x40026428

08000304 <DMA2_Start>:

void DMA2_Start(){
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
    *DMA2_S0NDTR = 8; // Number of data items to transfer
 8000308:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <DMA2_Start+0x3c>)
 800030a:	2208      	movs	r2, #8
 800030c:	601a      	str	r2, [r3, #0]
    *DMA2_S0PAR = (uint32_t)source; // Source address
 800030e:	4b0d      	ldr	r3, [pc, #52]	@ (8000344 <DMA2_Start+0x40>)
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <DMA2_Start+0x44>)
 8000312:	601a      	str	r2, [r3, #0]
    *DMA2_S0M0AR = (uint32_t)dest;  // Destination address
 8000314:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <DMA2_Start+0x48>)
 8000316:	4a0e      	ldr	r2, [pc, #56]	@ (8000350 <DMA2_Start+0x4c>)
 8000318:	601a      	str	r2, [r3, #0]
    *DMA2_S0CR |= (1 << 0); // Enable DMA stream
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <DMA2_Start+0x50>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <DMA2_Start+0x50>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6013      	str	r3, [r2, #0]

    // Wait for the DMA transfer to complete
    while ((*DMA2_S0CR & (1 << 0)) != 0) {
 8000326:	bf00      	nop
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <DMA2_Start+0x50>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f9      	bne.n	8000328 <DMA2_Start+0x24>
        // Wait until the stream is disabled after transfer completion
    }
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40026418 	.word	0x40026418
 8000344:	40026420 	.word	0x40026420
 8000348:	20000000 	.word	0x20000000
 800034c:	4002641c 	.word	0x4002641c
 8000350:	20000024 	.word	0x20000024
 8000354:	40026410 	.word	0x40026410

08000358 <reverse>:

void reverse(char* str, uint32_t len){
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < len / 2; i++) {
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	e01a      	b.n	800039e <reverse+0x46>
        char temp = str[i];
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	72fb      	strb	r3, [r7, #11]
        str[i] = str[len - 1 - i];
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	1ad3      	subs	r3, r2, r3
 8000378:	3b01      	subs	r3, #1
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	441a      	add	r2, r3
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	440b      	add	r3, r1
 8000384:	7812      	ldrb	r2, [r2, #0]
 8000386:	701a      	strb	r2, [r3, #0]
        str[len - 1 - i] = temp;
 8000388:	683a      	ldr	r2, [r7, #0]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	3b01      	subs	r3, #1
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	4413      	add	r3, r2
 8000394:	7afa      	ldrb	r2, [r7, #11]
 8000396:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len / 2; i++) {
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	3301      	adds	r3, #1
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	085b      	lsrs	r3, r3, #1
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d3df      	bcc.n	8000368 <reverse+0x10>
    }
}
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
	...

080003b8 <main>:

int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    DMA2_init();
 80003bc:	f7ff ff22 	bl	8000204 <DMA2_init>
    DMA2_Start();
 80003c0:	f7ff ffa0 	bl	8000304 <DMA2_Start>

    reverse(dest, 8); // Reverse the contents of the destination array
 80003c4:	2108      	movs	r1, #8
 80003c6:	4802      	ldr	r0, [pc, #8]	@ (80003d0 <main+0x18>)
 80003c8:	f7ff ffc6 	bl	8000358 <reverse>

    /* Loop forever */
    while (1) {
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <main+0x14>
 80003d0:	20000024 	.word	0x20000024

080003d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d4:	480d      	ldr	r0, [pc, #52]	@ (800040c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003dc:	480c      	ldr	r0, [pc, #48]	@ (8000410 <LoopForever+0x6>)
  ldr r1, =_edata
 80003de:	490d      	ldr	r1, [pc, #52]	@ (8000414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000418 <LoopForever+0xe>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e4:	e002      	b.n	80003ec <LoopCopyDataInit>

080003e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ea:	3304      	adds	r3, #4

080003ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f0:	d3f9      	bcc.n	80003e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	@ (800041c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000420 <LoopForever+0x16>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f8:	e001      	b.n	80003fe <LoopFillZerobss>

080003fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003fc:	3204      	adds	r2, #4

080003fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000400:	d3fb      	bcc.n	80003fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000402:	f000 f811 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000406:	f7ff ffd7 	bl	80003b8 <main>

0800040a <LoopForever>:

LoopForever:
  b LoopForever
 800040a:	e7fe      	b.n	800040a <LoopForever>
  ldr   r0, =_estack
 800040c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000418:	08000490 	.word	0x08000490
  ldr r2, =_sbss
 800041c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000420:	2000002c 	.word	0x2000002c

08000424 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC_IRQHandler>
	...

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	4d0d      	ldr	r5, [pc, #52]	@ (8000460 <__libc_init_array+0x38>)
 800042c:	4c0d      	ldr	r4, [pc, #52]	@ (8000464 <__libc_init_array+0x3c>)
 800042e:	1b64      	subs	r4, r4, r5
 8000430:	10a4      	asrs	r4, r4, #2
 8000432:	2600      	movs	r6, #0
 8000434:	42a6      	cmp	r6, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	4d0b      	ldr	r5, [pc, #44]	@ (8000468 <__libc_init_array+0x40>)
 800043a:	4c0c      	ldr	r4, [pc, #48]	@ (800046c <__libc_init_array+0x44>)
 800043c:	f000 f818 	bl	8000470 <_init>
 8000440:	1b64      	subs	r4, r4, r5
 8000442:	10a4      	asrs	r4, r4, #2
 8000444:	2600      	movs	r6, #0
 8000446:	42a6      	cmp	r6, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000450:	4798      	blx	r3
 8000452:	3601      	adds	r6, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f855 3b04 	ldr.w	r3, [r5], #4
 800045a:	4798      	blx	r3
 800045c:	3601      	adds	r6, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	0800048c 	.word	0x0800048c

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
