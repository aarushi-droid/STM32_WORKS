
DAC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080003a0  080003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003bc  080003bc  000013c4  2**0
                  CONTENTS
  4 .ARM          00000000  080003bc  080003bc  000013c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003bc  080003c4  000013c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003bc  080003bc  000013bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c0  080003c0  000013c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000438  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000110  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b93c  00000000  00000000  000019ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000586  00000000  00000000  0000d2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00041738  00000000  00000000  0000d86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004efa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000005c  00000000  00000000  0004efec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000031  00000000  00000000  0004f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000388 	.word	0x08000388

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000388 	.word	0x08000388

08000204 <main>:



int main(void)

{
 8000204:	b4b0      	push	{r4, r5, r7}
 8000206:	b08b      	sub	sp, #44	@ 0x2c
 8000208:	af00      	add	r7, sp, #0

//	float val = 0.0;

	uint32_t dac_value[] = {0,620,1240,1861,2481,3102,3722};
 800020a:	4b33      	ldr	r3, [pc, #204]	@ (80002d8 <main+0xd4>)
 800020c:	1d3c      	adds	r4, r7, #4
 800020e:	461d      	mov	r5, r3
 8000210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000218:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	int32_t i = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	627b      	str	r3, [r7, #36]	@ 0x24

	// enable GPIOA clock, bit 0 on AMBIENR

	RCC->AHB1ENR |=  (1 << 0);
 8000220:	4b2e      	ldr	r3, [pc, #184]	@ (80002dc <main+0xd8>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a2d      	ldr	r2, [pc, #180]	@ (80002dc <main+0xd8>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(3<<8);// Reset bits 8-9 to clear old values
 800022c:	4b2c      	ldr	r3, [pc, #176]	@ (80002e0 <main+0xdc>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a2b      	ldr	r2, [pc, #172]	@ (80002e0 <main+0xdc>)
 8000232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000236:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= (3<<8); // Set pin 4 to analog mode (@bil)
 8000238:	4b29      	ldr	r3, [pc, #164]	@ (80002e0 <main+0xdc>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a28      	ldr	r2, [pc, #160]	@ (80002e0 <main+0xdc>)
 800023e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000242:	6013      	str	r3, [r2, #0]

	// enable DAC clock, bit 29 on APBIENK

	RCC->APB1ENR |= (1 <<29);
 8000244:	4b25      	ldr	r3, [pc, #148]	@ (80002dc <main+0xd8>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000248:	4a24      	ldr	r2, [pc, #144]	@ (80002dc <main+0xd8>)
 800024a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800024e:	6413      	str	r3, [r2, #64]	@ 0x40

	DAC->CR |= (1 << 0); // enable DAC channel 1
 8000250:	4b24      	ldr	r3, [pc, #144]	@ (80002e4 <main+0xe0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a23      	ldr	r2, [pc, #140]	@ (80002e4 <main+0xe0>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]

	DAC->CR &= ~(1 << 1) ;// anable DAC chi output buffer
 800025c:	4b21      	ldr	r3, [pc, #132]	@ (80002e4 <main+0xe0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a20      	ldr	r2, [pc, #128]	@ (80002e4 <main+0xe0>)
 8000262:	f023 0302 	bic.w	r3, r3, #2
 8000266:	6013      	str	r3, [r2, #0]

	DAC->CR |= (1 << 2); // enable trigger
 8000268:	4b1e      	ldr	r3, [pc, #120]	@ (80002e4 <main+0xe0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a1d      	ldr	r2, [pc, #116]	@ (80002e4 <main+0xe0>)
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	6013      	str	r3, [r2, #0]

	DAC->CR |= (7 << 3);// choose se trigger as source (0b111)
 8000274:	4b1b      	ldr	r3, [pc, #108]	@ (80002e4 <main+0xe0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1a      	ldr	r2, [pc, #104]	@ (80002e4 <main+0xe0>)
 800027a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800027e:	6013      	str	r3, [r2, #0]


	// set output to Vref (dac value/0xFFF)
	DAC->DHR12R1 = dac_value[0];
 8000280:	4a18      	ldr	r2, [pc, #96]	@ (80002e4 <main+0xe0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6093      	str	r3, [r2, #8]

	DAC->SWTRIGR |= (1 << 0) ;// trigger chl
 8000286:	4b17      	ldr	r3, [pc, #92]	@ (80002e4 <main+0xe0>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	4a16      	ldr	r2, [pc, #88]	@ (80002e4 <main+0xe0>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6053      	str	r3, [r2, #4]

		while (1)

		{
//			dac_value = (val*4095)/3.3;
			for(int a=0;a<6;a++)
 8000292:	2300      	movs	r3, #0
 8000294:	623b      	str	r3, [r7, #32]
 8000296:	e01a      	b.n	80002ce <main+0xca>
			{
					DAC->DHR12R1 = dac_value[a];
 8000298:	4a12      	ldr	r2, [pc, #72]	@ (80002e4 <main+0xe0>)
 800029a:	6a3b      	ldr	r3, [r7, #32]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	3328      	adds	r3, #40	@ 0x28
 80002a0:	443b      	add	r3, r7
 80002a2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80002a6:	6093      	str	r3, [r2, #8]
					DAC->SWTRIGR |= (1 << 0) ;
 80002a8:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <main+0xe0>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <main+0xe0>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6053      	str	r3, [r2, #4]
					for(i=0;i<1000000;i++);
 80002b4:	2300      	movs	r3, #0
 80002b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80002b8:	e002      	b.n	80002c0 <main+0xbc>
 80002ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002bc:	3301      	adds	r3, #1
 80002be:	627b      	str	r3, [r7, #36]	@ 0x24
 80002c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002c2:	4a09      	ldr	r2, [pc, #36]	@ (80002e8 <main+0xe4>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	ddf8      	ble.n	80002ba <main+0xb6>
			for(int a=0;a<6;a++)
 80002c8:	6a3b      	ldr	r3, [r7, #32]
 80002ca:	3301      	adds	r3, #1
 80002cc:	623b      	str	r3, [r7, #32]
 80002ce:	6a3b      	ldr	r3, [r7, #32]
 80002d0:	2b05      	cmp	r3, #5
 80002d2:	dde1      	ble.n	8000298 <main+0x94>
 80002d4:	e7dd      	b.n	8000292 <main+0x8e>
 80002d6:	bf00      	nop
 80002d8:	080003a0 	.word	0x080003a0
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40020000 	.word	0x40020000
 80002e4:	40007400 	.word	0x40007400
 80002e8:	000f423f 	.word	0x000f423f

080002ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ec:	480d      	ldr	r0, [pc, #52]	@ (8000324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480c      	ldr	r0, [pc, #48]	@ (8000328 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f6:	490d      	ldr	r1, [pc, #52]	@ (800032c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000330 <LoopForever+0xe>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0a      	ldr	r2, [pc, #40]	@ (8000334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800030c:	4c0a      	ldr	r4, [pc, #40]	@ (8000338 <LoopForever+0x16>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031a:	f000 f811 	bl	8000340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f7ff ff71 	bl	8000204 <main>

08000322 <LoopForever>:

LoopForever:
  b LoopForever
 8000322:	e7fe      	b.n	8000322 <LoopForever>
  ldr   r0, =_estack
 8000324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000330:	080003c4 	.word	0x080003c4
  ldr r2, =_sbss
 8000334:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000338:	2000001c 	.word	0x2000001c

0800033c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC_IRQHandler>
	...

08000340 <__libc_init_array>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	4d0d      	ldr	r5, [pc, #52]	@ (8000378 <__libc_init_array+0x38>)
 8000344:	4c0d      	ldr	r4, [pc, #52]	@ (800037c <__libc_init_array+0x3c>)
 8000346:	1b64      	subs	r4, r4, r5
 8000348:	10a4      	asrs	r4, r4, #2
 800034a:	2600      	movs	r6, #0
 800034c:	42a6      	cmp	r6, r4
 800034e:	d109      	bne.n	8000364 <__libc_init_array+0x24>
 8000350:	4d0b      	ldr	r5, [pc, #44]	@ (8000380 <__libc_init_array+0x40>)
 8000352:	4c0c      	ldr	r4, [pc, #48]	@ (8000384 <__libc_init_array+0x44>)
 8000354:	f000 f818 	bl	8000388 <_init>
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	10a4      	asrs	r4, r4, #2
 800035c:	2600      	movs	r6, #0
 800035e:	42a6      	cmp	r6, r4
 8000360:	d105      	bne.n	800036e <__libc_init_array+0x2e>
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f855 3b04 	ldr.w	r3, [r5], #4
 8000368:	4798      	blx	r3
 800036a:	3601      	adds	r6, #1
 800036c:	e7ee      	b.n	800034c <__libc_init_array+0xc>
 800036e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000372:	4798      	blx	r3
 8000374:	3601      	adds	r6, #1
 8000376:	e7f2      	b.n	800035e <__libc_init_array+0x1e>
 8000378:	080003bc 	.word	0x080003bc
 800037c:	080003bc 	.word	0x080003bc
 8000380:	080003bc 	.word	0x080003bc
 8000384:	080003c0 	.word	0x080003c0

08000388 <_init>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr

08000394 <_fini>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr
